# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  compile:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [11, 12, 13]
    name: Java ${{ matrix.java }} compile

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - name: Compile the Project
        run: mvn -B compile

  build:
    runs-on: ubuntu-latest
    needs: compile
    name: Build the Maven Project

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B verify --file pom.xml
      - name: Upload Maven build artifact
        uses: actions/upload-artifact@v3
        with:
          name: artifact.jar
          path: junit-test/target/order-service-testing.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: Build Docker Container and Deploy to Kubernetes

    steps:
      - uses: actions/checkout@v3
      - name: Download Maven build artifact
        uses: actions/download-artifact@v3
        with:
          name: artifact.jar
          path: junit-test/target/
      - name: Build Docker container
        run: docker build -t junit-test/order-service-testing .
      - name: Push Docker image
        run: echo "Pushing Docker image to Container Registry (e.g. ECR)"
      - name: Deploy application
        run: echo "Deploying application (e.g. Kubernetes)"
